public class ProductListController {
    
    public Product_Table__c resultCpu = new  Product_Table__c();
    public Contact contactBuyer = new Contact();
    public List<Contact> buyer = new List<Contact>();
    public String email {get; set;}
    public Set<Contact> AllContacts = new Set<Contact>([SELECT Id, LastName, FirstName, Email FROM Contact]);
    public String Unit {get;set;}
    public String Amount{get; set;}
    public Integer TotalAmount;
    public List<Product_Table__c> MyProduct {get; set;}
    public List<Product_Table__c> MyProduct1 {get; set;}
    public Id idCpu {get;set;}
    public Order_Table__c Orders  = new Order_Table__c();
    
    //Filling in page "Product List"
    public ProductListController(){
        MyProduct = [SELECT Id, Name, Image_Url__c, Product_Description__c, 	Unit_Price__c  FROM Product_Table__c]; 
        for(Product_Table__c item : MyProduct){
            if(item.Product_Description__c.length() > 100){
                item.Product_Description__c = item.Product_Description__c.abbreviate(100); 
            }	     
        }
    } 
    
    
    
    public Integer getTotalAmount(){
        return TotalAmount;
    }
    
    //Calculation Total Amount
    public PageReference res(){
        try {
            Unit = ApexPages.currentPage().getParameters().get('Unit');
            Amount = ApexPages.currentPage().getParameters().get('Amount');
            TotalAmount = Integer.valueOf(Unit) * Integer.valueOf(Amount);
        }
        catch(Exception e)
        {
            TotalAmount = null;
            ApexPages.addMessage(new ApexPages.message(ApexPages.Severity.WARNING,'Please, enter correct Unit Count'));
        } 
        return null;
    }
    
    public PageReference redirect1() {
        return Page.ProductList;
    }
    
    //Search Product by Id
    public Product_Table__c getCpu() {
        resultCpu = [SELECT Id, Name, Image_Url__c, Product_Description__c, Unit_Price__c, Units_Available__c  FROM Product_Table__c
                     WHERE Id =: IdCpu LIMIT 1];
        return resultCpu;
    }
    
    public PageReference Buy(){
        getCpu();
        return Page.PageBuy;
    }
    
    public PageReference redirect() {
        if(getCpu() == null){
            return null;
        }
        return Page.ProductInfo;
    }
    
    // Adding an Order to the object
    public void addOrder(){
        Orders.Product__c = idCpu;
        try{
            Orders.Units__c = Integer.valueOf(Unit);
            Orders.Order_Amount__c = TotalAmount;
            If(resultCpu.Units_Available__c - Orders.Units__c < 0 ){
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.WARNING,'Not enough goods'));
            }
            else {
                resultCpu.Units_Available__c -= Orders.Units__c;
                update resultCpu;
                insert Orders;
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.CONFIRM,'Order is accepted'));
            }
        }
        catch(Exception e)
        {
            TotalAmount = null;
            ApexPages.addMessage(new ApexPages.message(ApexPages.Severity.ERROR,'Please, enter correct Unit Count'));
        } 
        
    }
    
    //Test contact
    public void SearchContact(){
        buyer = [SELECT Id, LastName, FirstName, Email FROM Contact WHERE Email =: email LIMIT 1];
        if (buyer.size() > 0){
            for(Contact cont : buyer){
                contactBuyer.Id = cont.Id;
                Orders.Contact__c = cont.Id;
            }
            update contactBuyer;
        } else insert contactBuyer;
    }
    
    public Contact getContactBuyer() {
        return this.contactBuyer;
    }
    
    //Take values of PageBuy
    public void buyProduct() {
        email = contactBuyer.Email;
        String firstName = contactBuyer.FirstName;
        String lastName = contactBuyer.LastName;
        SearchContact();
        addOrder();
    }
}